xlim = c(0,25000),
horiz = TRUE)
barplot(sort(table(diamonds[, i]), decreasing = FALSE),
col = "purple",
main = "Diamond Quality",
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
for(i in (2:4)){
print(
barplot(sort(table(diamonds[, i]), decreasing = FALSE),
col = "purple",
main = "Diamond Quality",
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
)
}
barplot(sort(table(diamonds[, i]), decreasing = FALSE),
col = "purple",
main = "Diamond Quality",
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
title_name = c("Cut", "Color", "Quality")
barplot(sorted_graph,
col = "purple",
main = title_name[i],
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
}
# Example problem: graphs for cut, color, clarity using a for loop
diamonds[, i]
graph = prop.table(table(diamonds[, i]))
barplot(sorted_graph,
col = "purple",
main = title_name[i],
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
graph = table(diamonds[, i])
title_name = c("Cut", "Color", "Quality")
barplot(sorted_graph,
col = "purple",
main = title_name[i],
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
graph = table(diamonds[, 1])
graph
sorted_graph = sort(graph, decreasing = FALSE)
sorted_graph
barplot(sorted_graph,
col = "purple",
main = title_name[1],
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
graph = prop.table(table(diamonds[, 1]))
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = title_name[1],
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
graph = prop.table(table(diamonds[, 2]))
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = title_name[1],
xlab = "Frequency",
xlim = c(0,25000),
horiz = TRUE)
barplot(sorted_graph,
col = "purple",
main = title_name[1],
ylab = "Frequency",
ylim = c(0,25000),)
barplot(sorted_graph,
col = "purple",
main = title_name[1],
ylab = "Frequency",
ylim = c(0,25000))
sorted_graph
graph = (table(diamonds[, 2])
graph = table(diamonds[, 2])
sorted_graph = sort(graph, decreasing = FALSE)
graph = table(diamonds[, 2])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = title_name[1],
ylab = "Frequency",
ylim = c(0,25000))
barplot(sorted_graph,
col = "purple",
main = title_name[i-1],
ylab = "Frequency",
ylim = c(0,25000))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = title_name[i-1],
ylab = "Frequency",
ylim = c(0,25000))
}
barplot(sorted_graph,
col = "purple",
main = title_name[i-1],
ylab = "Frequency")
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = title_name[i-1],
ylab = "Frequency")
}
barplot(sorted_graph,
col = "purple",
main = colnames[i],
ylab = "Frequency",
ylim = c(0,max(sorted_graph))
}
barplot(sorted_graph,
col = "purple",
main = colnames[i],
ylab = "Frequency",
ylim = c(0,max(sorted_graph)))
barplot(sorted_graph,
col = "purple",
main = colnames[i],
ylab = "Frequency",
ylim = c(0,max(graph)))
barplot(sorted_graph,
col = "purple",
main = colnames[i],
ylab = "Frequency",
ylim = c(0,max(diamonds[, i])))
barplot(sorted_graph,
col = "purple",
main = colnames[i],
ylab = "Frequency",
ylim = c(0, max(diamonds[[, i]])))
diamonds[,i]
table(diamonds[,i])
max(table(diamonds[,i]))
ylim = c(0, max(table(diamonds[,i]))
barplot(sorted_graph,
col = "purple",
main = colnames[i],
ylab = "Frequency",
ylim = c(0, max(table(diamonds[,i])))
}
max(table(diamonds[,i]))
barplot(sorted_graph,
col = "purple",
main = colnames[i],
ylab = "Frequency",
ylim = c(0, max(table(diamonds[,i]))))
barplot(sorted_graph,
col = "purple",
main = colnames(diamonds)[i],
ylab = "Frequency",
ylim = c(0, max(table(diamonds[,i]))))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = colnames(diamonds)[i],
ylab = "Frequency",
ylim = c(0, max(table(diamonds[,i]))))
}
barplot(sorted_graph,
col = "purple",
main = capitalize(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(table(diamonds[ , i]))))
barplot(sorted_graph,
col = "purple",
main = toTitlecase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(table(diamonds[ , i]))))
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(table(diamonds[ , i]))))
library(tools)
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(table(diamonds[ , i]))))
}
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph)))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph)))
}
print(max(graph))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
print(max(graph))
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph)))
}
barplot(sorted_graph,
col = "purple",
main = title_name[1],
ylab = "Frequency",
ylim = c(0,25000))
barplot(sorted_graph,
col = "purple",
main = title_name[1],
ylab = "Frequency",
ylim = c(0,13065))
par(mfrow = c(3,1))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
print(max(graph))
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph)))
}
par(mfrow = c(1,1))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
print(max(graph))
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph)))
}
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
print(max(graph))
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
}
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
}
# Dividing graphs on the screen
# par(mfrow = c(nrow =, ncol = )) #mf = multi-frame
# par(mfcol = c(nrow =, ncol = ))
# mfrow: fills the graph starting with the rows
# mfcol: fills the graph starting with the col
par(mfrow = c(3,1))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
}
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
scale_y_continuous(limits = c(0, max(graph) + 2000)))
scale_y_continuous(limits = c(0, max(graph) + 2000))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency")
}
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
xlab = "Frequency",
horiz = TRUE)
}
# (2) Pie graphs ----
# pie(frequency or percent)
pie(sort(table(diamonds$cut), decreasing = TRUE))
# Increasing or decreasing radius
# radius default is 0.8
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1)
# Dividing graphs on the screen
# par(mfrow = c(nrow =, ncol = )) #mf = multi-frame
# par(mfcol = c(nrow =, ncol = ))
# mfrow: fills the graph starting with the rows
# mfcol: fills the graph starting with the col
par(mfrow = c(1,1))
# Increasing or decreasing radius
# radius default is 0.8
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1)
# Increasing or decreasing radius
# radius default is 0.8
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 0.8)
# Increasing or decreasing radius
# radius default is 0.8
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1)
# clockwise = TRUE
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1, clockwise = FALSE)
# clockwise = TRUE
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1, clockwise = TRUE)
# Angle of the first slice of the pie
# init.angle = 90 is default
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1, clockwise = TRUE, init.angle = 90)
# Angle of the first slice of the pie
# init.angle = 90 is default
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1, clockwise = TRUE, init.angle = 120)
# Angle of the first slice of the pie
# init.angle = 90 is default
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1, clockwise = TRUE, init.angle = 180)
# Angle of the first slice of the pie
# init.angle = 90 is default
pie(sort(table(diamonds$cut), decreasing = TRUE), radius = 1, clockwise = TRUE, init.angle = 90)
pie(sorted_graph)
par(mfrow = c(3,2))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
col = "purple",
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph)
}
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]))
}
par(mfrow = c(3,2))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]))
}
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
radius = 1)
par(mfrow = c(3,2))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
radius = 1)
}
par(mfrow = c(3,2))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
radius = 10)
}
par(mfrow = c(3,2))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
radius = 3)
}
par(mfrow = c(3,2))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
radius = 1)
}
# Saving as pdf
# pdf(file = "directory/filename.pdf") : starting save
# Creating graphs
# dev.off() : finishing save
# dev : graphic device
pdf(file = "Desktop/FC_RSchool/graph.pdf")
par(mfrow = c(3,2))
for(i in (2:4)){
graph = table(diamonds[, i])
sorted_graph = sort(graph, decreasing = FALSE)
barplot(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
ylab = "Frequency",
ylim = c(0, max(graph) + 2000))
pie(sorted_graph,
main = toTitleCase(colnames(diamonds)[i]),
radius = 1)
}
dev.off()
diamonds$price.group <- cut(diamonds$price,
breaks = seq(from = 0, to = 20000, by = 5000),
right = FALSE)
prop.table(diamonds$price.group)
prop.table(table(diamonds$price.group))
levels(diamonds$price.group) <- c("< 5000", "5000 ~ 10000", "10000 ~ 15000", "15000 ~ 20000")
levels(diamonds$price.group)
table(diamonds$price.group)
prop.table(table(diamonds$price.group))*100
str(InsectSprays)
shapiro.test(InsectSprays)
by(InsectSprays, spray, shapiro.test)
by(InsectSprays$count, InsectSprays$spray, shapiro.test)
kruskal.test(InsectSprays$count ~ InsectSprays$spray, data = InsectSprays)
str(PlantGrowth)
by(PlantGrowth$weight, PlantGrowth$group, shapiro.test)
aov(PlantGrowth$weight ~ PlantGrowth$group, data = PlantGrowth)
summary(a)
a <- aov(PlantGrowth$weight ~ PlantGrowth$group, data = PlantGrowth)
summary(a)
TukeyHSD(a)
TukeyHSD(unlist(a))
TukeyHSD(a)
setwd("Desktop/FC_RSchool/Regression_Project/fcdc-overflow-project-1/data/seoul-cctv/")
cctv <- read.csv("seoul_cctv.csv", encoding = "utf-8")
str(cctv)
crime10 <- read.csv("2010년도.csv", encoding = "utf-8")
setwd("Desktop/FC_RSchool/Regression_Project/fcdc-overflow-project-1/data/seoul-crime/")
setwd("/Desktop/FC_RSchool/Regression_Project/fcdc-overflow-project-1/data/seoul-crime/")
setwd("/Users/eugenecha/Desktop/FC_RSchool/Regression_Project/fcdc-overflow-project-1/data/seoul-crime/")
crime10 <- read.csv("2010년도.csv", encoding = "utf-8")
str(crime10)
crime10$죄종
for(i in 10:16){
csv <- read.csv(paste("20",i,".csv"), encoding = "utf-i")
assign(paste("csv20",i), csv)
}
paste("20","10",".csv")
length(paste("20","10",".csv"))
nchar(paste("20","10",".csv"))
for(i in 10:16){
csv <- read.csv(paste("20",i,".csv", sep = ""), encoding = "utf-i")
assign(paste("csv20",i, sep = ""), csv)
}
setwd("/Users/eugenecha/Desktop/FC_RSchool/Regression_Project/fcdc-overflow-project-1/data/seoul-crime/csv")
for(i in 10:16){
csv <- read.csv(paste("20",i,".csv", sep = ""), encoding = "utf-i")
assign(paste("csv20",i, sep = ""), csv)
}
csv2014$구분
